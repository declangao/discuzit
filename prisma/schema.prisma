// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum VoteType {
  UP
  DOWN
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  username String? @unique

  posts              Post[]
  comments           Comment[]
  commentVotes       CommentVote[]
  votes              Vote[]
  createdCommunities Community[]    @relation("CreatedBy")
  subscriptions      Subscription[]
}

model Community {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts       Post[]
  subscribers Subscription[]

  creator   User   @relation("CreatedBy", fields: [creatorId], references: [id])
  creatorId String @db.ObjectId
}

model Subscription {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  community   Community @relation(fields: [communityId], references: [id])
  communityId String    @db.ObjectId

  @@index([userId, communityId])
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments Comment[]
  votes    Vote[]

  community   Community @relation(fields: [communityId], references: [id])
  communityId String    @db.ObjectId

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime @default(now())

  votes CommentVote[]

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId

  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId

  replyToId String?   @db.ObjectId
  repltTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")
}

model Vote {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  type VoteType

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId

  @@index([userId, postId])
}

model CommentVote {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  type VoteType

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String  @db.ObjectId

  @@index([userId, commentId])
}
